# Generated from ToxaLanguage.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,252,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,4,17,178,8,17,
        11,17,12,17,179,1,18,4,18,183,8,18,11,18,12,18,184,1,18,1,18,4,18,
        189,8,18,11,18,12,18,190,1,19,4,19,194,8,19,11,19,12,19,195,1,19,
        5,19,199,8,19,10,19,12,19,202,9,19,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,
        1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,4,37,245,8,37,11,37,
        12,37,246,1,37,1,37,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,1,0,3,
        3,0,65,90,97,122,1040,1103,3,0,9,10,13,13,32,32,1,0,48,57,256,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,79,1,0,0,0,3,85,1,0,0,0,5,88,1,
        0,0,0,7,93,1,0,0,0,9,97,1,0,0,0,11,103,1,0,0,0,13,112,1,0,0,0,15,
        119,1,0,0,0,17,121,1,0,0,0,19,125,1,0,0,0,21,131,1,0,0,0,23,134,
        1,0,0,0,25,137,1,0,0,0,27,142,1,0,0,0,29,148,1,0,0,0,31,155,1,0,
        0,0,33,164,1,0,0,0,35,177,1,0,0,0,37,182,1,0,0,0,39,193,1,0,0,0,
        41,203,1,0,0,0,43,205,1,0,0,0,45,207,1,0,0,0,47,209,1,0,0,0,49,211,
        1,0,0,0,51,213,1,0,0,0,53,215,1,0,0,0,55,217,1,0,0,0,57,219,1,0,
        0,0,59,221,1,0,0,0,61,223,1,0,0,0,63,225,1,0,0,0,65,228,1,0,0,0,
        67,231,1,0,0,0,69,234,1,0,0,0,71,237,1,0,0,0,73,240,1,0,0,0,75,244,
        1,0,0,0,77,250,1,0,0,0,79,80,5,112,0,0,80,81,5,114,0,0,81,82,5,105,
        0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,2,1,0,0,0,85,86,5,105,0,0,
        86,87,5,102,0,0,87,4,1,0,0,0,88,89,5,101,0,0,89,90,5,108,0,0,90,
        91,5,115,0,0,91,92,5,101,0,0,92,6,1,0,0,0,93,94,5,102,0,0,94,95,
        5,111,0,0,95,96,5,114,0,0,96,8,1,0,0,0,97,98,5,119,0,0,98,99,5,104,
        0,0,99,100,5,105,0,0,100,101,5,108,0,0,101,102,5,101,0,0,102,10,
        1,0,0,0,103,104,5,102,0,0,104,105,5,117,0,0,105,106,5,110,0,0,106,
        107,5,99,0,0,107,108,5,116,0,0,108,109,5,105,0,0,109,110,5,111,0,
        0,110,111,5,110,0,0,111,12,1,0,0,0,112,113,5,114,0,0,113,114,5,101,
        0,0,114,115,5,116,0,0,115,116,5,117,0,0,116,117,5,114,0,0,117,118,
        5,110,0,0,118,14,1,0,0,0,119,120,5,44,0,0,120,16,1,0,0,0,121,122,
        5,105,0,0,122,123,5,110,0,0,123,124,5,116,0,0,124,18,1,0,0,0,125,
        126,5,102,0,0,126,127,5,108,0,0,127,128,5,111,0,0,128,129,5,97,0,
        0,129,130,5,116,0,0,130,20,1,0,0,0,131,132,3,47,23,0,132,133,3,47,
        23,0,133,22,1,0,0,0,134,135,3,49,24,0,135,136,3,49,24,0,136,24,1,
        0,0,0,137,138,5,116,0,0,138,139,5,104,0,0,139,140,5,101,0,0,140,
        141,5,110,0,0,141,26,1,0,0,0,142,143,5,101,0,0,143,144,5,110,0,0,
        144,145,5,100,0,0,145,146,5,105,0,0,146,147,5,102,0,0,147,28,1,0,
        0,0,148,149,5,101,0,0,149,150,5,110,0,0,150,151,5,100,0,0,151,152,
        5,102,0,0,152,153,5,111,0,0,153,154,5,114,0,0,154,30,1,0,0,0,155,
        156,5,101,0,0,156,157,5,110,0,0,157,158,5,100,0,0,158,159,5,119,
        0,0,159,160,5,104,0,0,160,161,5,105,0,0,161,162,5,108,0,0,162,163,
        5,101,0,0,163,32,1,0,0,0,164,165,5,101,0,0,165,166,5,110,0,0,166,
        167,5,100,0,0,167,168,5,102,0,0,168,169,5,117,0,0,169,170,5,110,
        0,0,170,171,5,99,0,0,171,172,5,116,0,0,172,173,5,105,0,0,173,174,
        5,111,0,0,174,175,5,110,0,0,175,34,1,0,0,0,176,178,3,77,38,0,177,
        176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
        36,1,0,0,0,181,183,3,77,38,0,182,181,1,0,0,0,183,184,1,0,0,0,184,
        182,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,188,5,46,0,0,187,
        189,3,77,38,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,
        191,1,0,0,0,191,38,1,0,0,0,192,194,7,0,0,0,193,192,1,0,0,0,194,195,
        1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,200,1,0,0,0,197,199,
        3,77,38,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,
        1,0,0,0,201,40,1,0,0,0,202,200,1,0,0,0,203,204,5,42,0,0,204,42,1,
        0,0,0,205,206,5,37,0,0,206,44,1,0,0,0,207,208,5,47,0,0,208,46,1,
        0,0,0,209,210,5,43,0,0,210,48,1,0,0,0,211,212,5,45,0,0,212,50,1,
        0,0,0,213,214,5,61,0,0,214,52,1,0,0,0,215,216,5,40,0,0,216,54,1,
        0,0,0,217,218,5,41,0,0,218,56,1,0,0,0,219,220,5,59,0,0,220,58,1,
        0,0,0,221,222,5,62,0,0,222,60,1,0,0,0,223,224,5,60,0,0,224,62,1,
        0,0,0,225,226,5,62,0,0,226,227,5,61,0,0,227,64,1,0,0,0,228,229,5,
        60,0,0,229,230,5,61,0,0,230,66,1,0,0,0,231,232,5,61,0,0,232,233,
        5,61,0,0,233,68,1,0,0,0,234,235,5,33,0,0,235,236,5,61,0,0,236,70,
        1,0,0,0,237,238,5,38,0,0,238,239,5,38,0,0,239,72,1,0,0,0,240,241,
        5,124,0,0,241,242,5,124,0,0,242,74,1,0,0,0,243,245,7,1,0,0,244,243,
        1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,
        1,0,0,0,248,249,6,37,0,0,249,76,1,0,0,0,250,251,7,2,0,0,251,78,1,
        0,0,0,7,0,179,184,190,195,200,246,1,6,0,0
    ]

class ToxaLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    INCREMENT = 11
    DECREMENT = 12
    THEN = 13
    ENDIF = 14
    ENDFOR = 15
    ENDWHILE = 16
    ENDFUNCTION = 17
    INT = 18
    FLOAT = 19
    ID = 20
    MUL = 21
    REM = 22
    DIV = 23
    PLUS = 24
    MINUS = 25
    EQ = 26
    LPAREN = 27
    RPAREN = 28
    END_STATE = 29
    GT = 30
    LT = 31
    GE = 32
    LE = 33
    EQEQ = 34
    NE = 35
    AND = 36
    OR = 37
    WS = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'if'", "'else'", "'for'", "'while'", "'function'", 
            "'return'", "','", "'int'", "'float'", "'then'", "'endif'", 
            "'endfor'", "'endwhile'", "'endfunction'", "'*'", "'%'", "'/'", 
            "'+'", "'-'", "'='", "'('", "')'", "';'", "'>'", "'<'", "'>='", 
            "'<='", "'=='", "'!='", "'&&'", "'||'" ]

    symbolicNames = [ "<INVALID>",
            "INCREMENT", "DECREMENT", "THEN", "ENDIF", "ENDFOR", "ENDWHILE", 
            "ENDFUNCTION", "INT", "FLOAT", "ID", "MUL", "REM", "DIV", "PLUS", 
            "MINUS", "EQ", "LPAREN", "RPAREN", "END_STATE", "GT", "LT", 
            "GE", "LE", "EQEQ", "NE", "AND", "OR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "INCREMENT", "DECREMENT", "THEN", 
                  "ENDIF", "ENDFOR", "ENDWHILE", "ENDFUNCTION", "INT", "FLOAT", 
                  "ID", "MUL", "REM", "DIV", "PLUS", "MINUS", "EQ", "LPAREN", 
                  "RPAREN", "END_STATE", "GT", "LT", "GE", "LE", "EQEQ", 
                  "NE", "AND", "OR", "WS", "DIGIT" ]

    grammarFileName = "ToxaLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


