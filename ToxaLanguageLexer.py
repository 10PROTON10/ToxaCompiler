# Generated from ToxaLanguage.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,201,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,4,10,123,8,10,11,10,12,10,124,1,
        11,4,11,128,8,11,11,11,12,11,129,1,11,1,11,4,11,134,8,11,11,11,12,
        11,135,1,12,4,12,139,8,12,11,12,12,12,140,1,12,5,12,144,8,12,10,
        12,12,12,147,9,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,
        28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,4,32,194,8,32,11,
        32,12,32,195,1,32,1,32,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,0,1,0,3,2,0,65,90,97,122,3,0,9,10,
        13,13,32,32,1,0,48,57,205,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,69,
        1,0,0,0,3,75,1,0,0,0,5,78,1,0,0,0,7,83,1,0,0,0,9,87,1,0,0,0,11,93,
        1,0,0,0,13,102,1,0,0,0,15,109,1,0,0,0,17,111,1,0,0,0,19,115,1,0,
        0,0,21,122,1,0,0,0,23,127,1,0,0,0,25,138,1,0,0,0,27,148,1,0,0,0,
        29,150,1,0,0,0,31,152,1,0,0,0,33,154,1,0,0,0,35,156,1,0,0,0,37,158,
        1,0,0,0,39,160,1,0,0,0,41,162,1,0,0,0,43,164,1,0,0,0,45,166,1,0,
        0,0,47,168,1,0,0,0,49,170,1,0,0,0,51,173,1,0,0,0,53,176,1,0,0,0,
        55,179,1,0,0,0,57,182,1,0,0,0,59,185,1,0,0,0,61,188,1,0,0,0,63,190,
        1,0,0,0,65,193,1,0,0,0,67,199,1,0,0,0,69,70,5,112,0,0,70,71,5,114,
        0,0,71,72,5,105,0,0,72,73,5,110,0,0,73,74,5,116,0,0,74,2,1,0,0,0,
        75,76,5,105,0,0,76,77,5,102,0,0,77,4,1,0,0,0,78,79,5,101,0,0,79,
        80,5,108,0,0,80,81,5,115,0,0,81,82,5,101,0,0,82,6,1,0,0,0,83,84,
        5,102,0,0,84,85,5,111,0,0,85,86,5,114,0,0,86,8,1,0,0,0,87,88,5,119,
        0,0,88,89,5,104,0,0,89,90,5,105,0,0,90,91,5,108,0,0,91,92,5,101,
        0,0,92,10,1,0,0,0,93,94,5,102,0,0,94,95,5,117,0,0,95,96,5,110,0,
        0,96,97,5,99,0,0,97,98,5,116,0,0,98,99,5,105,0,0,99,100,5,111,0,
        0,100,101,5,110,0,0,101,12,1,0,0,0,102,103,5,114,0,0,103,104,5,101,
        0,0,104,105,5,116,0,0,105,106,5,117,0,0,106,107,5,114,0,0,107,108,
        5,110,0,0,108,14,1,0,0,0,109,110,5,44,0,0,110,16,1,0,0,0,111,112,
        5,105,0,0,112,113,5,110,0,0,113,114,5,116,0,0,114,18,1,0,0,0,115,
        116,5,102,0,0,116,117,5,108,0,0,117,118,5,111,0,0,118,119,5,97,0,
        0,119,120,5,116,0,0,120,20,1,0,0,0,121,123,3,67,33,0,122,121,1,0,
        0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,22,1,0,0,
        0,126,128,3,67,33,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,
        0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,133,5,46,0,0,132,134,3,67,
        33,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,
        0,0,136,24,1,0,0,0,137,139,7,0,0,0,138,137,1,0,0,0,139,140,1,0,0,
        0,140,138,1,0,0,0,140,141,1,0,0,0,141,145,1,0,0,0,142,144,3,67,33,
        0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,
        0,146,26,1,0,0,0,147,145,1,0,0,0,148,149,5,42,0,0,149,28,1,0,0,0,
        150,151,5,37,0,0,151,30,1,0,0,0,152,153,5,47,0,0,153,32,1,0,0,0,
        154,155,5,43,0,0,155,34,1,0,0,0,156,157,5,45,0,0,157,36,1,0,0,0,
        158,159,5,61,0,0,159,38,1,0,0,0,160,161,5,40,0,0,161,40,1,0,0,0,
        162,163,5,41,0,0,163,42,1,0,0,0,164,165,5,59,0,0,165,44,1,0,0,0,
        166,167,5,62,0,0,167,46,1,0,0,0,168,169,5,60,0,0,169,48,1,0,0,0,
        170,171,5,62,0,0,171,172,5,61,0,0,172,50,1,0,0,0,173,174,5,60,0,
        0,174,175,5,61,0,0,175,52,1,0,0,0,176,177,5,61,0,0,177,178,5,61,
        0,0,178,54,1,0,0,0,179,180,5,33,0,0,180,181,5,61,0,0,181,56,1,0,
        0,0,182,183,5,38,0,0,183,184,5,38,0,0,184,58,1,0,0,0,185,186,5,124,
        0,0,186,187,5,124,0,0,187,60,1,0,0,0,188,189,5,123,0,0,189,62,1,
        0,0,0,190,191,5,125,0,0,191,64,1,0,0,0,192,194,7,1,0,0,193,192,1,
        0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,197,1,
        0,0,0,197,198,6,32,0,0,198,66,1,0,0,0,199,200,7,2,0,0,200,68,1,0,
        0,0,7,0,124,129,135,140,145,195,1,6,0,0
    ]

class ToxaLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    INT = 11
    FLOAT = 12
    ID = 13
    MUL = 14
    REM = 15
    DIV = 16
    PLUS = 17
    MINUS = 18
    EQ = 19
    LPAREN = 20
    RPAREN = 21
    END_STATE = 22
    GT = 23
    LT = 24
    GE = 25
    LE = 26
    EQEQ = 27
    NE = 28
    AND = 29
    OR = 30
    RCORNER = 31
    LCORNER = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'if'", "'else'", "'for'", "'while'", "'function'", 
            "'return'", "','", "'int'", "'float'", "'*'", "'%'", "'/'", 
            "'+'", "'-'", "'='", "'('", "')'", "';'", "'>'", "'<'", "'>='", 
            "'<='", "'=='", "'!='", "'&&'", "'||'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "ID", "MUL", "REM", "DIV", "PLUS", "MINUS", 
            "EQ", "LPAREN", "RPAREN", "END_STATE", "GT", "LT", "GE", "LE", 
            "EQEQ", "NE", "AND", "OR", "RCORNER", "LCORNER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "INT", "FLOAT", "ID", "MUL", "REM", 
                  "DIV", "PLUS", "MINUS", "EQ", "LPAREN", "RPAREN", "END_STATE", 
                  "GT", "LT", "GE", "LE", "EQEQ", "NE", "AND", "OR", "RCORNER", 
                  "LCORNER", "WS", "DIGIT" ]

    grammarFileName = "ToxaLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


